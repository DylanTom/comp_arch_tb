import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import React from "react";
import Link from "next/link";
import { CopyToClipboard } from "react-copy-to-clipboard";

const Lab1: NextPage = () => {
    // constants
    const [num_of_lines, setLines] = React.useState(100);
    const [format_as_binary, setBinary] = React.useState(true);

    const MAX_INT = (2 ** 31) - 1;
    const MIN_INT = - (2 ** 31);

    const edge_cases = [
        [2147483647, -2147483648],
        [2147483647, 2147483647],
        [2147483647, 2147483647],
        [-2147483648, -2147483648],
        [0, 0],
        [0, 1],
        [-1, 1],
        [1, 0],
        [-1, 0],
        [1, 1],
        [0, -1],
        [-1, -1]
    ];

    const first_line =
        "\n# Notes: Please see the lab report for detailed insight into how testing works." +
        "\n#        " +
        "\n#        The first line above is the header, indicating the pins and their bit widths." +
        "\n#        " +
        `\n#        The next ${num_of_lines} lines are test cases generated by the custom test case generator.` +
        "\n#        " +
        `\n#        The last ${edge_cases.length} lines are carefully-generated edge cases that conform to specific use cases` +
        "\n#        " +
        `\n#        See the design report for more information.` +
        `\n` +
        `\n A[31:0] B[31:0] Out[31:0] containsNegative containsPositive containsZero containsLarge containsSmall containsSparse containsDense`

    type SingularTestCase = {
        line: string;
        features: {
            containsNegative: boolean;
            containsPositive: boolean;
            containsZero: boolean;
            containsLarge: boolean;
            containsSmall: boolean;
            containsSparse: boolean;
            containsDense: boolean;
        };
    };

    const getTwoComplement = (a: number) => {
        if (a < MIN_INT || a > MAX_INT) {
            return a.toString(2).slice(-32)
        }
        else if (a >= 0 && a <= MAX_INT) {
            return a.toString(2).padStart(32, '0');
        } else {
            const positiveValue = (-a) ^ MAX_INT;
            return (positiveValue + 1).toString(2).padStart(32, '1');
        }
    }

    const isSparse = (a: number) => {
        if ((a & (a >> 1)) == 0) return true;
        return false;
    }

    // generates a new singlar test case
    const newLine = (asBinary: boolean, alpha?: number, beta?: number): SingularTestCase => {
        let line = "";

        let a: number, b: number;

        if (alpha !== undefined && beta !== undefined) {
            a = alpha
            b = beta
        } else {
            a = Math.floor(Math.random() * (MAX_INT - MIN_INT + 1)) + MIN_INT;
            b = Math.floor(Math.random() * (MAX_INT - MIN_INT + 1)) + MIN_INT;
        }

        let out = a * b;

        if (asBinary) {
            line += getTwoComplement(a) + " ";
            line += getTwoComplement(b) + " ";
            line += getTwoComplement(out) + " ";
        } else {
            line += a + " ";
            line += b + " ";
            line += out + " ";
        }

        return {
            line: line,
            features: {
                containsNegative: a < 0 || b < 0,
                containsPositive: a > 0 || b > 0,
                containsZero: a == 0 || b == 0,
                containsLarge: Math.abs(a) > Math.floor(MAX_INT / 2) || Math.abs(b) > Math.floor(MAX_INT / 2),
                containsSmall: Math.abs(a) < Math.floor(MAX_INT / 2) || Math.abs(b) < Math.floor(MAX_INT / 2),
                containsSparse: isSparse(a) || isSparse(b),
                containsDense: !isSparse(a) || !isSparse(b)
            },
        };
    };

    // hook to display the generated test file
    const [testCases, setTestCases] = React.useState("");

    const generate = (): void => {
        let featureCheck = {
            containsNegative: false,
            containsPositive: false,
            containsZero: false,
            containsLarge: false,
            containsSmall: false,
            containsSparse: false,
            containsDense: false
        };

        let newText = first_line;
        for (let i = 0; i < num_of_lines; i++) {
            // Generate a new test case
            let o = newLine(format_as_binary);

            // Check if the new line contains any of the features
            for (let key in featureCheck) {
                if (o.features[key as keyof typeof o.features]) {
                    featureCheck[key as keyof typeof featureCheck] = true;
                }
            }
            // Append the new line to the text
            newText += "\n" + o.line + Object.values(o.features);
        }

        // if the feature check features aren't all true, generate again
        // for (let key in featureCheck) {
        //     if (!featureCheck[key as keyof typeof featureCheck]) {
        //         generate();
        //         return;
        //     }
        // }

        // add the edge cases
        for (let i = 0; i < edge_cases.length; i++) {
            let o = newLine(format_as_binary, edge_cases[i][0], edge_cases[i][1]);
            newText += "\n" + o.line + Object.values(o.features);
        }

        // if the feature check passes, set the text
        setTestCases(newText);
    };

    // const injectData = () => {
    //     exec('bash ../scripts/inject.sh', (error, stdout, stderr) => {
    //         if (error) {
    //           console.error(`Error executing script: ${error}`);
    //           return;
    //         }
    //         if (stderr) {
    //           console.error(`Script returned an error: ${stderr}`);
    //           return;
    //         }
    //         console.log("Sucessful");
    //       });
    // }

    const [inputValue, setInputValue] = React.useState('');

    const handleSubmit = (event: any) => {
        event.preventDefault();
        if (!isNaN(parseInt(inputValue))) {
            setLines(parseInt(inputValue));
            setInputValue('');
        }
    };

    const handleChange = (event: any) => {
        setInputValue(event.target.value);
    };

    React.useEffect(() => {
        generate();
      }, [num_of_lines]);

    return (
        <div className={styles.container}>
            <Head>
                <title>Lab 1</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <main className={styles.notmain}>
                <h1 className={styles.title}>
                    Lab 1: Iterative Integer Multiplier
                </h1>
                <br />
                <Link href="/">
                    Return Home
                </Link>
                <br />
                <button onClick={() => setBinary(!format_as_binary)} >
                    {format_as_binary ? "Switch to Decimal" : "Switch to Binary"}
                </button>

                <form onSubmit={handleSubmit}>
                    <input type="text" value={inputValue} onChange={handleChange} placeholder="Enter # of Testcases" />
                    <button type="submit">Generate Test Cases</button>
                </form>

                <br />
                <CopyToClipboard text={testCases}>
                    <button className='bg-blue-600 text-white text-sm leading-6 font-medium py-2 px-5 rounded-lg'>
                        Copy to Clipboard
                    </button>
                </CopyToClipboard>
                <br />
                <br />
                <hr />
                <br />
                <code className={styles.code}>{testCases}</code>
                <br />
            </main>
        </div>
    );
};

export default Lab1;